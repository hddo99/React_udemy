{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seaonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAc,CAChBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,kBACNC,SAAU,eA2BHE,EAfO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARpC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAW,SAEpBA,EAAM,EAAI,SAAW,UAIJ,EAGJP,EAAYS,GAA9BP,EAHsB,EAGtBA,KAAMC,EAHgB,EAGhBA,SAGb,OACI,sBAAKS,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC9BlBU,EAAU,SAACP,GACb,OACI,qBAAKM,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SACKN,EAAMQ,aAMvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCZTG,E,4MACFC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEf,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAe,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACpD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,6EAS/C,OACI,8BACOc,KAAKX,MAAMC,cAAiBU,KAAKX,MAAMV,KAElCqB,KAAKX,MAAMV,KAAOqB,KAAKX,MAAMC,aAAgB,0CAAaU,KAAKX,MAAMC,gBAAuB,cAAC,EAAD,CAAeX,IAAKqB,KAAKX,MAAMV,MAD7H,cAAC,EAAD,CAASO,QAAQ,yC,GAlBrBe,IAAMC,WAiCxBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.33bbe090.chunk.js","sourcesContent":["import './SeasonDisplay.css'\nimport React from 'react'\n\nconst seaonConfig = {\n    summer: {\n        text: \"Let's hit the beach!\",\n        iconName: 'sun'\n    },\n    winter: {\n        text: \"Burr it is cold\",\n        iconName: 'snowflake'\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if(month > 2 && month < 9){\n        return lat > 0 ? 'summer' : 'winter'\n    } else{\n        return  lat > 0 ? 'winter' : 'summer'\n    }\n}\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth())\n\n    const {text, iconName} = seaonConfig[season]\n    // const icon = season === 'winter' ? 'snowflake' : 'sun'\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`}/>\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`}/>\n        </div>\n    )\n}\n\nexport default SeasonDisplay","import React from 'react'\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">\n                {props.message}\n            </div>\n        </div>\n    )\n}\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n}\n\nexport default Spinner","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SeasonDisplay from './SeasonDisplay'\nimport Spinner from './Spinner'\nclass App extends React.Component {\n    state = { lat: null, errorMessage: ''}\n\n    componentDidMount(){\n        window.navigator.geolocation.getCurrentPosition(\n            (position) =>  this.setState({ lat: position.coords.latitude}), \n            (err) => this.setState({ errorMessage: err.message })\n        )\n    }\n\n    componentDidUpdate(){\n\n    }\n    render(){\n        \n        return(\n            <div>\n                {(!this.state.errorMessage && !this.state.lat) \n                    ? <Spinner message=\"Please accept location request\"/>\n                    : (!this.state.lat && this.state.errorMessage) ? <div>Error: {this.state.errorMessage}</div>  : <SeasonDisplay lat={this.state.lat}/>\n                }\n            </div>\n          \n        )\n        // if(this.state.errorMessage && !this.state.lat) return <div>Error: {this.state.errorMessage}</div>\n\n        // if(!this.state.errorMessage && this.state.lat)\n        //     return <SeasonDisplay lat={this.state.lat}/>\n\n        \n    \n    }\n}\nReactDOM.render(\n    <App/>,\n    document.querySelector('#root')\n)"],"sourceRoot":""}